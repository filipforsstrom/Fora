// <auto-generated />
using System;
using Fora.Server.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fora.Server.Migrations.UserDb
{
    [DbContext(typeof(UserDbContext))]
    partial class UserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Fora.Shared.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ForaUser")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            Banned = false,
                            ConcurrencyStamp = "c18abf73-d824-466f-803c-58948c8c18c1",
                            DateTimeCreated = new DateTime(2022, 4, 12, 17, 1, 45, 872, DateTimeKind.Local).AddTicks(9020),
                            DateTimeModified = new DateTime(2022, 4, 12, 17, 1, 45, 872, DateTimeKind.Local).AddTicks(9080),
                            Deleted = false,
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            ForaUser = 1,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKhPm2D78BFD7ZkW2oNU4pEFlrFsjVBfKEw78T/l0110Hs00x5LA1PGpM8P0++49dQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d64c248d-6de6-4700-b002-1c7cee87d38f",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e6",
                            AccessFailedCount = 0,
                            Banned = false,
                            ConcurrencyStamp = "bf386981-9910-4a30-8cc6-a17600802576",
                            DateTimeCreated = new DateTime(2022, 4, 12, 17, 1, 45, 879, DateTimeKind.Local).AddTicks(275),
                            DateTimeModified = new DateTime(2022, 4, 12, 17, 1, 45, 879, DateTimeKind.Local).AddTicks(299),
                            Deleted = false,
                            Email = "jesper@gmail.com",
                            EmailConfirmed = false,
                            ForaUser = 2,
                            LockoutEnabled = false,
                            NormalizedUserName = "JESPER",
                            PasswordHash = "AQAAAAEAACcQAAAAEMuG/6O+83EgRHrJAxNe1RDaMwt9uN01bvsMqniFrIMYugqMIIbWBTuNf9nXLcC80Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fce43287-ba63-40f8-87fd-d2189e4f9da9",
                            TwoFactorEnabled = false,
                            UserName = "Jesper"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e7",
                            AccessFailedCount = 0,
                            Banned = true,
                            ConcurrencyStamp = "a52c918c-fc12-4dfe-85cd-06d953397d1b",
                            DateTimeCreated = new DateTime(2022, 4, 12, 17, 1, 45, 886, DateTimeKind.Local).AddTicks(9370),
                            DateTimeModified = new DateTime(2022, 4, 12, 17, 1, 45, 886, DateTimeKind.Local).AddTicks(9402),
                            Deleted = false,
                            Email = "filip@gmail.com",
                            EmailConfirmed = false,
                            ForaUser = 3,
                            LockoutEnabled = false,
                            NormalizedUserName = "FILIP",
                            PasswordHash = "AQAAAAEAACcQAAAAEFMENBgMitl5DS89TMDNIWAxy/7y0rU078IawinUrX1AIDzqFS1jp40BpGxUmILD/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15642a9f-5039-4d6a-b5a8-4faa0b7126e6",
                            TwoFactorEnabled = false,
                            UserName = "Filip"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e8",
                            AccessFailedCount = 0,
                            Banned = false,
                            ConcurrencyStamp = "cc51e8a5-505d-4079-bc51-fa37c29b345f",
                            DateTimeCreated = new DateTime(2022, 4, 12, 17, 1, 45, 893, DateTimeKind.Local).AddTicks(2739),
                            DateTimeModified = new DateTime(2022, 4, 12, 17, 1, 45, 893, DateTimeKind.Local).AddTicks(2761),
                            Deleted = true,
                            Email = "mårten@gmail.com",
                            EmailConfirmed = false,
                            ForaUser = 4,
                            LockoutEnabled = false,
                            NormalizedUserName = "MÅRTEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKMylNgM47gdNrLwnpzRcnjnJj90MEBnhVc8plKwRpPxI+GdgvoYJbLDxd8jfzEyMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58f1b277-18ec-4f5a-939a-f707e9d6f2f6",
                            TwoFactorEnabled = false,
                            UserName = "Mårten"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "AdminId",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "UserId",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "BannedId",
                            ConcurrencyStamp = "3",
                            Name = "Banned",
                            NormalizedName = "BANNED"
                        },
                        new
                        {
                            Id = "DeletedId",
                            ConcurrencyStamp = "4",
                            Name = "Deleted",
                            NormalizedName = "DELETED"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "AdminId"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "UserId"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e6",
                            RoleId = "UserId"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e7",
                            RoleId = "BannedId"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e8",
                            RoleId = "DeletedId"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Fora.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Fora.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fora.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Fora.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
