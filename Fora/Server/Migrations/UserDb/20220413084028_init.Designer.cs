// <auto-generated />
using System;
using Fora.Server.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fora.Server.Migrations.UserDb
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20220413084028_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Fora.Shared.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ForaUser")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            Banned = false,
                            ConcurrencyStamp = "90a8482c-ebfd-4b48-aff3-bfcc7e00a96a",
                            DateTimeCreated = new DateTime(2022, 4, 13, 10, 40, 27, 694, DateTimeKind.Local).AddTicks(110),
                            DateTimeModified = new DateTime(2022, 4, 13, 10, 40, 27, 694, DateTimeKind.Local).AddTicks(192),
                            Deleted = false,
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            ForaUser = 1,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFEdMfqOXX8HvbPJcyzuaIdsWC+sgN4Sd4JeUPbYlcxGMNvo1ASytdCUWN9VnizS8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42029cf1-536c-4d0d-b530-fff6e231f0ee",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e6",
                            AccessFailedCount = 0,
                            Banned = false,
                            ConcurrencyStamp = "60aba6fc-c401-4a4d-b276-e8c131dc3292",
                            DateTimeCreated = new DateTime(2022, 4, 13, 10, 40, 27, 703, DateTimeKind.Local).AddTicks(6102),
                            DateTimeModified = new DateTime(2022, 4, 13, 10, 40, 27, 703, DateTimeKind.Local).AddTicks(6113),
                            Deleted = false,
                            Email = "jesper@gmail.com",
                            EmailConfirmed = false,
                            ForaUser = 2,
                            LockoutEnabled = false,
                            NormalizedEmail = "JESPER@GMAIL.COM",
                            NormalizedUserName = "JESPER",
                            PasswordHash = "AQAAAAEAACcQAAAAECOb6rqLw8jq7jRm2gY701kSVbxnSoaJKpbxgRQGaB8c2RC7isLjPq/rbOW41HzQPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c20b721-ae76-4a28-9ad2-c4d6cd015a4d",
                            TwoFactorEnabled = false,
                            UserName = "Jesper"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e7",
                            AccessFailedCount = 0,
                            Banned = true,
                            ConcurrencyStamp = "72f2e8a6-1cbb-47e2-b10a-8118c7307d8f",
                            DateTimeCreated = new DateTime(2022, 4, 13, 10, 40, 27, 713, DateTimeKind.Local).AddTicks(1188),
                            DateTimeModified = new DateTime(2022, 4, 13, 10, 40, 27, 713, DateTimeKind.Local).AddTicks(1213),
                            Deleted = false,
                            Email = "filip@gmail.com",
                            EmailConfirmed = false,
                            ForaUser = 3,
                            LockoutEnabled = false,
                            NormalizedEmail = "FILIP@GMAIL.COM",
                            NormalizedUserName = "FILIP",
                            PasswordHash = "AQAAAAEAACcQAAAAEOleoA7ymtalFUcvupZa9EVxvfVVHrYO3cdthX5Y0rMd+RCVHOKGU70er+ogZ8J7Uw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec775b62-0097-4498-b555-7f80ee28be4f",
                            TwoFactorEnabled = false,
                            UserName = "Filip"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e8",
                            AccessFailedCount = 0,
                            Banned = false,
                            ConcurrencyStamp = "1033d67a-2b49-4e8e-a109-6b15fa1a2855",
                            DateTimeCreated = new DateTime(2022, 4, 13, 10, 40, 27, 722, DateTimeKind.Local).AddTicks(1454),
                            DateTimeModified = new DateTime(2022, 4, 13, 10, 40, 27, 722, DateTimeKind.Local).AddTicks(1484),
                            Deleted = true,
                            Email = "marten@gmail.com",
                            EmailConfirmed = false,
                            ForaUser = 4,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARTEN@GMAIL.COM",
                            NormalizedUserName = "MÅRTEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOgoRGidoknR2VIZb2fstvvaGTRxgDMF37IYrJi0zKCmDWvwnF/r3dqsfrm05jDeoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5697b68d-28fd-4a3d-9321-512fbe13ffb5",
                            TwoFactorEnabled = false,
                            UserName = "Mårten"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e9",
                            AccessFailedCount = 0,
                            Banned = false,
                            ConcurrencyStamp = "4405bf22-c3f3-4bb0-b07f-687c8c3092bc",
                            DateTimeCreated = new DateTime(2022, 4, 13, 10, 40, 27, 731, DateTimeKind.Local).AddTicks(1742),
                            DateTimeModified = new DateTime(2022, 4, 13, 10, 40, 27, 731, DateTimeKind.Local).AddTicks(1762),
                            Deleted = false,
                            Email = "dragan@gmail.com",
                            EmailConfirmed = false,
                            ForaUser = 5,
                            LockoutEnabled = false,
                            NormalizedEmail = "DRAGAN@GMAIL.COM",
                            NormalizedUserName = "DRAGAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAokPscjD5FQ+oQdfVQVR7ZrzrFlCW1m4tJVURDyKmd7Pg7Kx7j6tpAWwfPfym2uPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c91e8e8-85c8-49c6-9be8-cd01d2c0d49f",
                            TwoFactorEnabled = false,
                            UserName = "Dragan"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "AdminId",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "UserId",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "BannedId",
                            ConcurrencyStamp = "3",
                            Name = "Banned",
                            NormalizedName = "BANNED"
                        },
                        new
                        {
                            Id = "DeletedId",
                            ConcurrencyStamp = "4",
                            Name = "Deleted",
                            NormalizedName = "DELETED"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "AdminId"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "UserId"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e6",
                            RoleId = "UserId"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e7",
                            RoleId = "BannedId"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e8",
                            RoleId = "DeletedId"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e9",
                            RoleId = "UserId"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Fora.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Fora.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fora.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Fora.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
