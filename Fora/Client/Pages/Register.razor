@page "/register"
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject IInterestService InterestService
@inject NavigationManager NavigationManager
@inject IUserInterestService UserInterestService

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Username" HelperText="Max. 8 characters"
                                  @bind-Value="model.Username" For="@(() => model.Username)" />
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="model.Email" For="@(() => model.Email)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

<MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" MultiSelection="true"  @bind-SelectedValues="options" T="int" Label="Interests" AdornmentIcon="@Icons.Material.Filled.Search" AnchorOrigin="Origin.BottomCenter">
    @foreach (var interest in AllInterests)
    {
        <MudSelectItem T="int" Value="interest.Id">@interest.Name</MudSelectItem>
    }
</MudSelect>

@code {
    private string value { get; set; } = "Nothing selected";
    private IEnumerable<int> options { get; set; } = new HashSet<int>();
    private List<InterestModel> AllInterests { get; set; } = new();

    RegisterAccountForm model = new RegisterAccountForm();
    UserRegisterDto UserRegister { get; set; } = new();

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(30, ErrorMessage = "Username must be at least 3 characters long.", MinimumLength = 3)]
        public string Username { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await InterestService.GetInterests();
        var interestsList = InterestService.Interests;
        AllInterests = InterestService.Interests;
        //AllInterests = interestsList.Select(i => i.Name).ToList();
    }

    private async Task OnValidSubmit(EditContext context)
    {
        UserRegister.Username = model.Username;
        UserRegister.Email = model.Email;
        UserRegister.Password = model.Password;
        
        foreach (var interest in options)
        {
            UserRegister.UserInterestIds.Add(interest);
            //Console.WriteLine(interest);
            //await UserInterestService.CreateUserInterest(interest);
        }

        await AuthService.Register(UserRegister);
        NavigationManager.NavigateTo("interests");
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"Selected interest{(selectedValues.Count > 1 ? "s" : "")}: {string.Join(", ", selectedValues.Select(x => x))}";
    }
}