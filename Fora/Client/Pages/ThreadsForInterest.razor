@page "/threads/{interestid:int}"
@inject IThreadService ThreadService
@inject NavigationManager navManager

<MudTable T="ThreadModel" OnRowClick="@RowClicked" Items="@Threads" Hover="true" Filter="new Func<ThreadModel, bool>(FilterCycleCheck)" LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Available threads</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="Search" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField> 
    </ToolBarContent>
    <HeaderContent>
        <MudTh><b>Threads</b></MudTh>
        <MudTh><b># of messages</b></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ThreadModel, object>(t => t.DateTimeCreated)"><b>DateTime Created</b></MudTableSortLabel></MudTh>
        <MudTh>User</MudTh>
    </HeaderContent>
    <RowTemplate>

        <MudTd DataLabel="Threads">@context.Name</MudTd>
        <MudTd DataLabel="# of messages">@context.Messages.Count</MudTd>
        <MudTd DataLabel="DateTime Created">@context.DateTimeCreated</MudTd>

        @if(context.User.Banned)
        {
            <MudTd DataLabel="User">User has been banned.</MudTd>
        }
        else if(context.User.Deleted || context.User == null)
        {
            <MudTd DataLabel="User">User has been deleted.</MudTd>
        }
        else 
        {
            <MudTd DataLabel="User">@context.User.Username</MudTd>
        }
        

    </RowTemplate>
</MudTable>

<ThreadCreate ResetThreads="ResetThreads" InterestId=InterestId></ThreadCreate>
<ChangeThreadName InterestId=InterestId></ChangeThreadName>
<RemoveThread InterestId=InterestId></RemoveThread>

@code {

    [Parameter]
    public int InterestId { get; set; }
    private string Search { get; set; } = "";

    private List<ThreadModel> Threads { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Threads = await ThreadService.GetThreads(InterestId);
    }

    private bool FilterCycleCheck(ThreadModel thread)
    {
        if(thread.Name.Contains(Search))
        {
            return true;
        }
        return false;
    }

    public void RowClicked(TableRowClickEventArgs<ThreadModel> t)
    {
        navManager.NavigateTo($"/messages/{t.Item.Id}");
    }

    private async Task ResetThreads()
    {
        Threads = await ThreadService.GetThreads(InterestId);
    }
}
