        @inject IAuthService AuthService
        @inject IMessageService MessageService
        @inject IDialogService DialogService

        @if(Msg.Deleted)
        {
            <MudTd DataLabel="UserId"></MudTd>
            <MudTd DataLabel="Message">Message has been deleted.</MudTd>
            <MudTd DataLabel="Posted"></MudTd>
        }
        else if(Msg.DateTimeCreated < Msg.DateTimeModified)
        {
            <MudTd DataLabel="UserId">@Msg.User.Username</MudTd>
            <MudTd DataLabel="Message">@Msg.Message <i>Message edited</i></MudTd>
            <MudTd DataLabel="Posted">@Msg.DateTimeCreated</MudTd>
        }
        else if(User.Id == Msg.UserId)
        {
            <MudTd Style="background-color:lightskyblue;" DataLabel="UserId">@Msg.User.Username</MudTd>
            <MudTd Style="background-color:lightskyblue;" DataLabel="Message">@Msg.Message</MudTd>
            <MudTd Style="background-color:lightskyblue;" DataLabel="Posted">@Msg.DateTimeCreated</MudTd>
            <MudTd DataLabel="Edit"><MudButton Variant="Variant.Text" Color="Color.Tertiary" OnClick="@((e) => EditMessage(Msg))">Edit</MudButton></MudTd>
            <MudTd DataLabel="Delete"><MudButton Variant="Variant.Text" Color="Color.Error" @onclick="(() => DeleteMessage(Msg))">X</MudButton></MudTd>
        }
        else if(Msg.User.Banned)
        {
            <MudTd DataLabel="UserId">Banned user.</MudTd>
            <MudTd DataLabel="Message">@Msg.Message</MudTd>
            <MudTd DataLabel="Posted">@Msg.DateTimeCreated</MudTd>
        }
        else
        {
            <MudTd DataLabel="UserId">@Msg.User.Username</MudTd>
            <MudTd DataLabel="Message">@Msg.Message</MudTd>
            <MudTd DataLabel="Posted">@Msg.DateTimeCreated</MudTd>
        }


@code {
    [Parameter]
    public MessageModel Msg { get; set; }
    [Parameter]
    public UserAuth User { get; set; }
    private bool UserIsAdmin { get; set; }
    [CascadingParameter]
    public MessagesForThread? _Parent { get; set; }


    protected override async Task OnInitializedAsync()
    {
        UserIsAdmin = await AuthService.IsAdmin();
    }

    public async Task DeleteMessage(MessageModel msg)
    {
        MessageDeleteDto messageToDelete = new()
            {
                Id = msg.Id,
                ThreadId = msg.ThreadId
            };

        await MessageService.DeleteMessage(messageToDelete);
        _Parent.RefreshMessages();
    }

    public async Task EditMessage(MessageModel Message)
    {
        var parameters = new DialogParameters { ["Message"]=Message };

        var dialog = DialogService.Show<EditMessageDialog>("Edit Message", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            _Parent.RefreshMessages();
        }
    }

}
