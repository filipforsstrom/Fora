@inject IMessageService MessageService
@inject NavigationManager NavManager
@inject IAuthService AuthService 

<EditForm Model="@MessageToCreate" OnValidSubmit="@CreateMessage" OnInvalidSubmit="@InvalidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary></ValidationSummary>

    <MudTextField T="string" Lines="2" Variant="Variant.Outlined" Text="@BoxText" @bind-Value="MessageToCreate.Message"></MudTextField>
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Send</MudButton>
</EditForm>

@code {
    [Parameter]
    public int ThreadId { get; set; }

    [CascadingParameter]
    public MessagesForThread? _Parent { get; set; }

    private MessageCreateDto MessageToCreate { get; set; } = new();
    private string BoxText { get; set; } = "";

    private async Task CreateMessage()
    {

        MessageToCreate.ThreadId = ThreadId;

        //Finds null after not re-logged in each couple of minutes.
        MessageToCreate.UserId = await AuthService.GetUserId();

        await MessageService.CreateMessage(MessageToCreate);
        await MessageService.GetMessages(ThreadId);
        _Parent.RefreshMessages();
        BoxText = "";
    }

    private void InvalidSubmit()
    {
        BoxText = MessageToCreate.Message;
    }

}
