@inject IMessageService MessageService

<EditForm Model="@MessageToCreate" OnValidSubmit="@CreateMessage" OnInvalidSubmit="@InvalidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary></ValidationSummary>

    <MudTextField  T="string" Lines="2" Variant="Variant.Outlined" Text="" @bind-Value="MessageToCreate.Message"></MudTextField>
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Send</MudButton>
</EditForm>

@code {
    [Parameter]
    public int ThreadId { get; set; }
    [Parameter]
    public UserAuth User { get; set; }
    [Parameter]
    public MessageModel MessageToEdit { get; set; }

    [CascadingParameter]
    public MessagesForThread? _Parent { get; set; }


    private MessageCreateDto MessageToCreate { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        //Bug, text disappears when clicking outside of textbox. Can still post message.
    }

    private async Task CreateMessage()
    {
        MessageToCreate.ThreadId = ThreadId;
        //Finds null after not re-logged in each couple of minutes.
        MessageToCreate.UserId = User.Id;

        await MessageService.CreateMessage(MessageToCreate);
        await MessageService.GetMessages(ThreadId);
        _Parent.RefreshMessages();
        StateHasChanged();
    }


    private void InvalidSubmit()
    {
    }

}
