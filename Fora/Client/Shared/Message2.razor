@inject IMessageService MessageService
@inject IDialogService DialogService
@inject IAuthService AuthService

<MudTd DataLabel="UserId">@Msg.User.Username</MudTd>
<MudTd DataLabel="Message">
@if (displayMessage)
{
    <MudText>@Msg.Message</MudText>
}
</MudTd>
<MudTd DataLabel="Posted">@Msg.DateTimeCreated</MudTd>

@if (User.Id == Msg.UserId)
{
    if(displayEdit)
    {
     <MudTd DataLabel="Edit"><MudButton Variant="Variant.Text" Color="Color.Tertiary" OnClick="@((e) => EditMessage(Msg))">Edit</MudButton></MudTd>
    <MudTd DataLabel="Delete"><MudButton Variant="Variant.Text" Color="Color.Error" @onclick="(() => DeleteMessage(Msg))">X</MudButton></MudTd>
    }
    
}

@code {
    [Parameter]
    public MessageModel Msg { get; set; }
    [Parameter]
    public UserAuth User { get; set; }
    private string parameter { get; set; } = "display: none;";
    private bool displayEdit { get; set; } = true;
    private bool displayMessage { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (Msg.User.Banned)
        {
            Msg.User.Username = Msg.User.Username + " Banned";
        }
        @if(Msg.User.Deleted)
        {
            Msg.User.Username = "Deleted user";
        }
        if (Msg.Deleted)
        {
            Msg.Message = "Message removed";
            displayEdit = false;
        }
    }

    public async Task DeleteMessage(MessageModel msg)
    {
        MessageDeleteDto messageToDelete = new()
            {
                Id = msg.Id,
                ThreadId = msg.ThreadId
            };

        await MessageService.DeleteMessage(messageToDelete);
    }

    public async Task EditMessage(MessageModel Message)
    {
        var parameters = new DialogParameters { ["Message"] = Message };

        var dialog = DialogService.Show<EditMessageDialog>("Edit Message", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
        }
    }
}
