@inject IMessageService MessageService
@inject IDialogService DialogService
@inject IAuthService AuthService

<MudTd Style="@parameter" DataLabel="UserId">@Msg.User.Username</MudTd>
<MudTd Style="@parameter" DataLabel="Message"><MudText>@Msg.Message</MudText></MudTd>
<MudTd Style="@parameter" DataLabel="Posted">@Msg.DateTimeCreated</MudTd>


<MudTd DataLabel="Edit"><MudButton Variant="Variant.Text" Disabled=@DisableEdit Color="Color.Tertiary" OnClick="@((e) => EditMessage(Msg))">Edit</MudButton></MudTd>
<MudTd DataLabel="Delete"><MudButton Variant="Variant.Text" Disabled=@DisableEdit Color="Color.Error" @onclick="(() => DeleteMessage(Msg))">X</MudButton></MudTd>


@code {
    [Parameter]
    public MessageModel Msg { get; set; }
    [Parameter]
    public UserAuth User { get; set; }
    

    private bool UserIsAdmin { get; set; }
    private string parameter { get; set; }
    private bool DisableEdit { get; set; } = true;


    protected override async Task OnInitializedAsync()
    {
        UserIsAdmin = await AuthService.IsAdmin();

        if(UserIsAdmin)
        {
            DisableEdit = false;
            if(User.Id == Msg.User.Id)
            {
                parameter = "background-color: blue;";
            }
        }

        if (Msg.User.Banned)
        {
            Msg.User.Username = "Banned user";
        }
        if (Msg.User.Deleted)
        {
            Msg.User.Username = "Deleted user";
        }
        if (Msg.Deleted)
        {
            Msg.Message = "Message removed";
            if(!UserIsAdmin)
            {
                DisableEdit = true;
            }
        }
        if (Msg.DateTimeCreated < Msg.DateTimeModified && !Msg.Deleted)
        {
            //Not message deleted because it has datetimemodified-data.
            Msg.Message = Msg.Message + $" (Message Edited)";
        }
        if (Msg.UserId == User.Id && !UserIsAdmin)
        {
            parameter = "background-color: blue;";
            if (!Msg.Deleted)
            {
                DisableEdit = false;
            }
        }

    }

    public async Task DeleteMessage(MessageModel msg)
    {
        MessageDeleteDto messageToDelete = new()
            {
                Id = msg.Id,
                ThreadId = msg.ThreadId
            };

        await MessageService.DeleteMessage(messageToDelete);
    }

    public async Task EditMessage(MessageModel Message)
    {
        var parameters = new DialogParameters { ["Message"] = Message };

        var dialog = DialogService.Show<EditMessageDialog>("Edit Message", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
           
        }
    }
}
