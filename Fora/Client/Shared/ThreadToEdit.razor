@inject IThreadService ThreadService
@inject IDialogService DialogService
@inject IAuthService AuthService

<MudTd DataLabel="Sign">@Thread.Name</MudTd>
<MudTd DataLabel="Change Thread Name">
    <MudIconButton Disabled=@DisableEdit OnClick="@((e) => EditThreadName(Thread))" Icon="@Icons.Filled.Edit" Color="Color.Primary" aria-label="delete"></MudIconButton>
</MudTd>
<MudTd DataLabel="Delete Thread">
    <MudIconButton @onclick="(() => DeleteThread(Thread))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" aria-label="delete"></MudIconButton>
</MudTd>

@code {
    [Parameter]
    public ThreadModel Thread { get; set; }
    [Parameter]
    public UserAuth User { get; set; }
    [Parameter]
    public EventCallback ResetEditThreads { get; set; }

    private bool UserIsAdmin { get; set; }
    private bool DisableEdit { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        UserIsAdmin = await AuthService.IsAdmin();

        if (UserIsAdmin || Thread.Messages.Count == 0)
        {
            DisableEdit = false;
        }
    }


    public async Task EditThreadName(ThreadModel thread)
    {
        var parameters = new DialogParameters { ["Thread"] = thread };

        var dialog = DialogService.Show<EditThreadDialog>("Edit Thread Name", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await InvokeResetEditThreads();
        }
    }

    public async Task DeleteThread(ThreadModel thread)
    {
        ThreadDeleteDto threadToDelete = new()
            {
                Id = thread.Id,
                InterestId = thread.InterestId
            };

        await ThreadService.DeleteThread(threadToDelete);
        await InvokeResetEditThreads();
    }

    private async Task InvokeResetEditThreads() => await ResetEditThreads.InvokeAsync();
}
