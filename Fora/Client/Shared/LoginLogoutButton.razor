@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<AuthorizeView>
    <Authorized>
        @*<MudIconButton Icon="@Icons.Filled.Logout" @onclick="Logout" aria-label="delete"></MudIconButton>*@
        <MudText Align="Align.Right">Hi User</MudText>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Logout" @onclick="Logout" IconColor="Color.Secondary">Logout</MudButton>
    </Authorized>
    <NotAuthorized>
                    <MudTextField @bind-Value="Username" Label="Username" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <MudTextField @bind-Value="Password" Label="Password" InputType="InputType.Password" Variant="Variant.Outlined" Margin="Margin.Dense" />
        @*<MudIconButton Icon="@Icons.Filled.Login" @onclick="Login" aria-label="delete"></MudIconButton>*@
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Login" @onclick="Login" IconColor="Color.Primary">Login</MudButton>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string Username { get; set; }
    private string Password { get; set; }

    void Login()
    {
        NavigationManager.NavigateTo("login");
    }

    async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("token");
        await AuthStateProvider.GetAuthenticationStateAsync();
    }

}