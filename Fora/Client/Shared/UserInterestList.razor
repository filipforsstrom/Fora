@inject IUserInterestService UserInterestService
@inject IInterestService InterestService

<MudText Typo="Typo.h6">My interests</MudText>
<MudPaper Width="300px">
    <MudList>
        @foreach (var interest in UserInterests)
        {
            <MudListItem Text="@interest.Name" />
        }
    </MudList>
</MudPaper>

<MudTable Items="@AllInterests" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true" Bordered="true"
          CustomHeader="true" HeaderClass="table-head-bordered" FooterClass="table-foot-bordered">
    <HeaderContent>
        <MudTHeadRow IgnoreCheckbox="true" Class="header-centered">
            <MudTh colspan="3">Choose your interests</MudTh>
        </MudTHeadRow>
        <MudTHeadRow IsCheckable="true" >
            <MudTh>Name</MudTh>
            <MudTh>My interests</MudTh>
        </MudTHeadRow>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Create Interest">
        <MudButton @onclick="(() => CreateUserInterest(context.Id))" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton></MudTd>
        <MudTd DataLabel="Remove Interest">
        <MudButton @onclick="(() => DeleteUserInterest(context.Id))" Variant="Variant.Filled" Color="Color.Error">Remove</MudButton></MudTd>
    </RowTemplate>
</MudTable>

@code {
    List<InterestModel> AllInterests { get; set; } = new();
    List<InterestModel> UserInterests { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await InterestService.GetInterests();
        AllInterests = InterestService.Interests;
        UserInterests = await UserInterestService.GetUserInterests();
    }
    private async Task CreateUserInterest(int interestId)
    {
        await UserInterestService.CreateUserInterest(interestId);
        UserInterests = await UserInterestService.GetUserInterests();
        StateHasChanged();
    }
    private async Task DeleteUserInterest(int interestId)
    {
        await UserInterestService.DeleteUserInterest(interestId);
        UserInterests = await UserInterestService.GetUserInterests();
        StateHasChanged();
    }
}